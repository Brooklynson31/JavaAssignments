package net.springroo.myfirst.dao;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import net.springroo.myfirst.domain.PendingFriendship;
import net.springroo.myfirst.domain.Users;

@Repository
@Transactional //allows us to load users into memory because it of the lazy load
public class UserDAO {
	
	@PersistenceContext
	EntityManager em;

	public Users getUserbyUsername(String username) {
		
		Session session = (Session) em.getDelegate();
		
		return (Users) session.createCriteria(Users.class).add(Restrictions.eq("username",username)).uniqueResult();
		
	}
	
	public void addFriend(Users user, Users friend){
		Session session = (Session) em.getDelegate();
		user = (Users) session.createCriteria(Users.class).add(Restrictions.idEq(user.getId())).uniqueResult();
		user.getFriends().add(friend);
		
		session.saveOrUpdate(user);
	}

	public void addFriendRequest(Users user, Users friend) {
		Session session = (Session) em.getDelegate();

		user = (Users) session.createCriteria(Users.class).add(Restrictions.idEq(user.getId())).uniqueResult();

		
		PendingFriendship pendingFriendship = new PendingFriendship();
		pendingFriendship.setFriendId(friend);
		user.getPendingFriendship().add(pendingFriendship);

		
		session.saveOrUpdate(pendingFriendship);
//		PendingFriendship friendship = (PendingFriendship) session.createCriteria(PendingFriendship.class)
//		.add(Restrictions.eq("friendid", friend))
//		.add(Restrictions.eqOrIsNull("userid", user)).uniqueResult();

		//pendingFriendship.setUserId(user);
		
//		if(friendship != null)
//		{												
//			pendingFriendship.setID(friendship.getID()); //if dont have identiefir set in object hibernate assumes you want to create new one. does update, not save
//		}												//because we setID hibernate assumes ID exists so hibernate will update existing one
		
		
		
	}

}
